package br.com.contatos.service.impl;

import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Service;

import br.com.contatos.entity.Contato;
import br.com.contatos.repository.ContatoRepository;
import br.com.contatos.service.ContatoService;
import br.com.contatos.service.exception.ContatoNotFoundException;

@Service
public class ContatoServiceImpl implements ContatoService {

	private final ContatoRepository repository;
	
	public ContatoServiceImpl(ContatoRepository repository) {
		this.repository = repository;
	}
	
	@Override
	public Contato create(Contato contato) {
		Contato contatoPersited = Contato.getBuilder().nome(contato.getNome())
													  .cor(contato.getCor())
													  .data(contato.getData())
													  .operadora(contato.getOperadora())
													  .telefone(contato.getTelefone())
													  .build();
		return repository.save(contatoPersited);
	}

	@Override
    public void delete(String id) {
		Contato deleted = findContatoById(id);
        repository.delete(deleted);
    }
 
    @Override
    public List<Contato> findAll() {
        return repository.findAll();
    }
 
    @Override
    public Contato findById(String id) {
    	return findContatoById(id);
    }
 
    @Override
    public TodoDTO update(TodoDTO todo) {
        Todo updated = findTodoById(todo.getId());
        updated.update(todo.getTitle(), todo.getDescription());
        updated = repository.save(updated);
        return convertToDTO(updated);
    }
 
    private Todo findTodoById(String id) {
        Optional<todo> result = repository.findOne(id);
        return result.orElseThrow(() -> new TodoNotFoundException(id));
 
    }
 
    private TodoDTO convertToDTO(Todo model) {
        TodoDTO dto = new TodoDTO();
 
        dto.setId(model.getId());
        dto.setTitle(model.getTitle());
        dto.setDescription(model.getDescription());
 
        return dto;
    }

}
